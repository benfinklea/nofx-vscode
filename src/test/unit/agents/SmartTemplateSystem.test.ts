import { describe, it, expect, beforeEach } from '@jest/globals';\nimport {\n    SmartTemplateFactory,\n    DeveloperConfig,\n    ArchitectConfig,\n    QualityConfig,\n    ProcessConfig,\n    DeveloperSmartTemplate,\n    ArchitectSmartTemplate,\n    QualitySmartTemplate,\n    ProcessSmartTemplate\n} from '../../../agents/SmartTemplateSystem';\n\ndescribe('SmartTemplateSystem', () => {\n    describe('DeveloperSmartTemplate', () => {\n        it('should create frontend developer template', () => {\n            const config: DeveloperConfig = {\n                category: 'developer',\n                primaryDomain: 'frontend',\n                languages: ['typescript', 'javascript', 'html', 'css'],\n                frameworks: ['react', 'next.js'],\n                specializations: ['responsive-design', 'accessibility'],\n                toolchain: ['vscode', 'git'],\n                complexity: 'high',\n                priority: 'high'\n            };\n\n            const template = new DeveloperSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('frontend-developer');\n            expect(result.name).toBe('Frontend Developer');\n            expect(result.icon).toBe('🎨');\n            expect(result.config.category).toBe('developer');\n            expect(result.systemPrompt).toContain('Frontend Developer');\n            expect(result.systemPrompt).toContain('responsive-design, accessibility');\n            expect(result.capabilities).toHaveProperty('languages');\n            expect(result.taskPreferences.preferred).toContain('responsive-design');\n        });\n\n        it('should create backend developer template', () => {\n            const config: DeveloperConfig = {\n                category: 'developer',\n                primaryDomain: 'backend',\n                languages: ['typescript', 'python'],\n                frameworks: ['express', 'fastapi'],\n                specializations: ['api-design', 'database-design'],\n                toolchain: ['docker', 'postgresql'],\n                complexity: 'high',\n                priority: 'high'\n            };\n\n            const template = new DeveloperSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('backend-developer');\n            expect(result.name).toBe('Backend Developer');\n            expect(result.icon).toBe('⚙️');\n            expect(result.taskPreferences.preferred).toContain('api-design');\n            expect(result.taskPreferences.avoid).toContain('pure-ui');\n        });\n\n        it('should create AI/ML developer template', () => {\n            const config: DeveloperConfig = {\n                category: 'developer',\n                primaryDomain: 'ai-ml',\n                languages: ['python', 'typescript'],\n                frameworks: ['tensorflow', 'langchain'],\n                specializations: ['machine-learning', 'nlp'],\n                toolchain: ['jupyter', 'docker'],\n                complexity: 'high',\n                priority: 'high'\n            };\n\n            const template = new DeveloperSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('ai-ml-developer');\n            expect(result.icon).toBe('🤖');\n            expect(result.capabilities).toHaveProperty('domain', 'ai-ml');\n        });\n    });\n\n    describe('ArchitectSmartTemplate', () => {\n        it('should create software architect template', () => {\n            const config: ArchitectConfig = {\n                category: 'architect',\n                scope: 'software',\n                focusAreas: ['system-design', 'scalability', 'performance'],\n                decisionLevel: 'strategic',\n                systemTypes: ['microservices', 'distributed-systems'],\n                complexity: 'high',\n                priority: 'critical'\n            };\n\n            const template = new ArchitectSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('software-architect');\n            expect(result.name).toBe('Software Architect');\n            expect(result.icon).toBe('🏗️');\n            expect(result.systemPrompt).toContain('Software Architect');\n            expect(result.systemPrompt).toContain('system-design, scalability, performance');\n            expect(result.taskPreferences.preferred).toContain('system-design');\n            expect(result.taskPreferences.avoid).toContain('detailed-implementation');\n        });\n\n        it('should create database architect template', () => {\n            const config: ArchitectConfig = {\n                category: 'architect',\n                scope: 'database',\n                focusAreas: ['data-modeling', 'optimization'],\n                decisionLevel: 'technical',\n                systemTypes: ['relational', 'nosql'],\n                complexity: 'high',\n                priority: 'high'\n            };\n\n            const template = new ArchitectSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('database-architect');\n            expect(result.icon).toBe('🗄️');\n            expect(result.capabilities).toHaveProperty('scope', 'database');\n        });\n    });\n\n    describe('QualitySmartTemplate', () => {\n        it('should create testing specialist template', () => {\n            const config: QualityConfig = {\n                category: 'quality',\n                primaryFocus: 'testing',\n                testingTypes: ['unit', 'integration', 'e2e'],\n                securityScope: ['application-security'],\n                auditAreas: ['code-quality'],\n                toolchain: ['jest', 'cypress', 'playwright'],\n                complexity: 'high',\n                priority: 'critical'\n            };\n\n            const template = new QualitySmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('testing-specialist');\n            expect(result.name).toBe('Testing Specialist');\n            expect(result.icon).toBe('🧪');\n            expect(result.taskPreferences.preferred).toContain('unit');\n            expect(result.taskPreferences.avoid).toContain('ui-design');\n        });\n\n        it('should create security specialist template', () => {\n            const config: QualityConfig = {\n                category: 'quality',\n                primaryFocus: 'security',\n                testingTypes: ['penetration-testing'],\n                securityScope: ['application-security', 'infrastructure-security'],\n                auditAreas: ['vulnerability-assessment'],\n                toolchain: ['burp-suite', 'owasp-zap'],\n                complexity: 'high',\n                priority: 'critical'\n            };\n\n            const template = new QualitySmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('security-specialist');\n            expect(result.icon).toBe('🔒');\n            expect(result.capabilities).toHaveProperty('primaryFocus', 'security');\n        });\n    });\n\n    describe('ProcessSmartTemplate', () => {\n        it('should create product manager template', () => {\n            const config: ProcessConfig = {\n                category: 'process',\n                role: 'product-manager',\n                methodologies: ['agile', 'scrum'],\n                stakeholders: ['users', 'development-team', 'business'],\n                deliverables: ['roadmaps', 'requirements', 'user-stories'],\n                communicationStyle: 'business',\n                complexity: 'medium',\n                priority: 'high'\n            };\n\n            const template = new ProcessSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('product-manager');\n            expect(result.name).toBe('Product Manager');\n            expect(result.icon).toBe('📊');\n            expect(result.taskPreferences.preferred).toContain('product-strategy');\n            expect(result.taskPreferences.avoid).toContain('detailed-implementation');\n        });\n\n        it('should create technical writer template', () => {\n            const config: ProcessConfig = {\n                category: 'process',\n                role: 'technical-writer',\n                methodologies: ['documentation-driven'],\n                stakeholders: ['developers', 'users'],\n                deliverables: ['documentation', 'guides', 'tutorials'],\n                communicationStyle: 'technical',\n                complexity: 'medium',\n                priority: 'medium'\n            };\n\n            const template = new ProcessSmartTemplate(config);\n            const result = template.generateTemplate();\n\n            expect(result.id).toBe('technical-writer');\n            expect(result.icon).toBe('📝');\n            expect(result.taskPreferences.preferred).toContain('documentation');\n        });\n    });\n\n    describe('SmartTemplateFactory', () => {\n        it('should create template from developer config', () => {\n            const config: DeveloperConfig = {\n                category: 'developer',\n                primaryDomain: 'fullstack',\n                languages: ['typescript', 'python'],\n                frameworks: ['react', 'express'],\n                specializations: ['end-to-end-development'],\n                toolchain: ['docker', 'kubernetes'],\n                complexity: 'high',\n                priority: 'high'\n            };\n\n            const template = SmartTemplateFactory.createTemplate(config);\n\n            expect(template.id).toBe('fullstack-developer');\n            expect(template.config.category).toBe('developer');\n            expect(template.capabilities).toHaveProperty('languages');\n            expect(template.systemPrompt).toContain('Fullstack Developer');\n        });\n\n        it('should create preset templates', () => {\n            const presets = SmartTemplateFactory.createPresetTemplates();\n\n            expect(presets).toHaveLength(6);\n            \n            const frontendPreset = presets.find(t => t.id === 'frontend-developer');\n            const backendPreset = presets.find(t => t.id === 'backend-developer');\n            const fullstackPreset = presets.find(t => t.id === 'fullstack-developer');\n            const architectPreset = presets.find(t => t.id === 'software-architect');\n            const testingPreset = presets.find(t => t.id === 'testing-specialist');\n            const pmPreset = presets.find(t => t.id === 'product-manager');\n\n            expect(frontendPreset).toBeDefined();\n            expect(backendPreset).toBeDefined();\n            expect(fullstackPreset).toBeDefined();\n            expect(architectPreset).toBeDefined();\n            expect(testingPreset).toBeDefined();\n            expect(pmPreset).toBeDefined();\n\n            // Verify they have expected properties\n            expect(frontendPreset?.config.category).toBe('developer');\n            expect((frontendPreset?.config as DeveloperConfig).primaryDomain).toBe('frontend');\n            expect(architectPreset?.config.category).toBe('architect');\n            expect(testingPreset?.config.category).toBe('quality');\n            expect(pmPreset?.config.category).toBe('process');\n        });\n\n        it('should throw error for unknown category', () => {\n            const invalidConfig = {\n                category: 'invalid' as any,\n                complexity: 'medium' as const,\n                priority: 'high' as const\n            };\n\n            expect(() => SmartTemplateFactory.createTemplate(invalidConfig))\n                .toThrow('Unknown template category: invalid');\n        });\n    });\n\n    describe('Template Properties', () => {\n        let developerTemplate: any;\n        let architectTemplate: any;\n        let qualityTemplate: any;\n        let processTemplate: any;\n\n        beforeEach(() => {\n            const developerConfig: DeveloperConfig = {\n                category: 'developer',\n                primaryDomain: 'frontend',\n                languages: ['typescript'],\n                frameworks: ['react'],\n                specializations: ['ui-ux'],\n                toolchain: ['vscode'],\n                complexity: 'high',\n                priority: 'high'\n            };\n\n            const architectConfig: ArchitectConfig = {\n                category: 'architect',\n                scope: 'software',\n                focusAreas: ['system-design'],\n                decisionLevel: 'strategic',\n                systemTypes: ['microservices'],\n                complexity: 'high',\n                priority: 'critical'\n            };\n\n            const qualityConfig: QualityConfig = {\n                category: 'quality',\n                primaryFocus: 'testing',\n                testingTypes: ['unit'],\n                securityScope: [],\n                auditAreas: [],\n                toolchain: ['jest'],\n                complexity: 'medium',\n                priority: 'high'\n            };\n\n            const processConfig: ProcessConfig = {\n                category: 'process',\n                role: 'product-manager',\n                methodologies: ['agile'],\n                stakeholders: ['users'],\n                deliverables: ['roadmaps'],\n                communicationStyle: 'business',\n                complexity: 'medium',\n                priority: 'high'\n            };\n\n            developerTemplate = SmartTemplateFactory.createTemplate(developerConfig);\n            architectTemplate = SmartTemplateFactory.createTemplate(architectConfig);\n            qualityTemplate = SmartTemplateFactory.createTemplate(qualityConfig);\n            processTemplate = SmartTemplateFactory.createTemplate(processConfig);\n        });\n\n        it('should have all required properties', () => {\n            const templates = [developerTemplate, architectTemplate, qualityTemplate, processTemplate];\n\n            templates.forEach(template => {\n                expect(template).toHaveProperty('id');\n                expect(template).toHaveProperty('name');\n                expect(template).toHaveProperty('icon');\n                expect(template).toHaveProperty('terminalIcon');\n                expect(template).toHaveProperty('color');\n                expect(template).toHaveProperty('description');\n                expect(template).toHaveProperty('version', '3.0.0');\n                expect(template).toHaveProperty('config');\n                expect(template).toHaveProperty('systemPrompt');\n                expect(template).toHaveProperty('detailedPrompt');\n                expect(template).toHaveProperty('capabilities');\n                expect(template).toHaveProperty('taskPreferences');\n                expect(template).toHaveProperty('filePatterns');\n                expect(template).toHaveProperty('commands');\n                expect(template).toHaveProperty('workflow');\n                expect(template).toHaveProperty('bestPractices');\n                expect(template).toHaveProperty('riskMitigation');\n                expect(template).toHaveProperty('metrics');\n                expect(template).toHaveProperty('documentation');\n            });\n        });\n\n        it('should have proper task preferences structure', () => {\n            const templates = [developerTemplate, architectTemplate, qualityTemplate, processTemplate];\n\n            templates.forEach(template => {\n                expect(template.taskPreferences).toHaveProperty('preferred');\n                expect(template.taskPreferences).toHaveProperty('avoid');\n                expect(template.taskPreferences).toHaveProperty('priority');\n                expect(template.taskPreferences).toHaveProperty('complexity');\n                expect(Array.isArray(template.taskPreferences.preferred)).toBe(true);\n                expect(Array.isArray(template.taskPreferences.avoid)).toBe(true);\n            });\n        });\n\n        it('should have proper file patterns structure', () => {\n            const templates = [developerTemplate, architectTemplate, qualityTemplate, processTemplate];\n\n            templates.forEach(template => {\n                expect(template.filePatterns).toHaveProperty('watch');\n                expect(template.filePatterns).toHaveProperty('ignore');\n                expect(Array.isArray(template.filePatterns.watch)).toBe(true);\n                expect(Array.isArray(template.filePatterns.ignore)).toBe(true);\n            });\n        });\n\n        it('should have workflow with phases and checkpoints', () => {\n            const templates = [developerTemplate, architectTemplate, qualityTemplate, processTemplate];\n\n            templates.forEach(template => {\n                expect(template.workflow).toHaveProperty('phases');\n                expect(template.workflow).toHaveProperty('checkpoints');\n                expect(Array.isArray(template.workflow.phases)).toBe(true);\n                expect(Array.isArray(template.workflow.checkpoints)).toBe(true);\n                expect(template.workflow.phases.length).toBeGreaterThan(0);\n                expect(template.workflow.checkpoints.length).toBeGreaterThan(0);\n            });\n        });\n    });\n});", "new_string": ""}