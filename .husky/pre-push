#!/bin/sh

# Pre-push hook for NofX VS Code Extension
# Comprehensive validation before pushing to remote

echo "🚀 Running pre-push validation..."
echo "This may take a few minutes..."

# Run all tests (which includes compilation via pretest)
echo "🧪 Running test suite..."
npm test || {
    echo "❌ Tests failed. Please fix failing tests before pushing."
    exit 1
}

# Check code coverage (if available)
echo "📊 Checking code coverage..."
if grep -q "test:coverage" package.json; then
    npm run test:coverage || {
        echo "⚠️  Coverage check failed. Continuing anyway..."
    }
else
    echo "⚠️  Coverage check not configured. Skipping..."
fi

# Package extension with clean build
echo "📦 Creating VSIX package (clean build)..."
npm run build:clean || {
    echo "❌ Failed to create VSIX package. Please fix errors before pushing."
    exit 1
}

# Dynamically resolve VSIX filename from package.json
PACKAGE_NAME=$(node -e "console.log(require('./package.json').name)")
PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
VSIX_PATTERN="${PACKAGE_NAME}-*.vsix"
EXPECTED_VSIX="${PACKAGE_NAME}-${PACKAGE_VERSION}.vsix"

# Validate the package (using glob pattern)
VSIX_FILE=$(ls ${VSIX_PATTERN} 2>/dev/null | head -n 1)
if [ -n "$VSIX_FILE" ]; then
    echo "✅ VSIX package created successfully: $VSIX_FILE"
    
    # Check package size
    size=$(stat -f%z "$VSIX_FILE" 2>/dev/null || stat -c%s "$VSIX_FILE" 2>/dev/null)
    if [ "$size" -lt 10000 ]; then
        echo "⚠️  Warning: VSIX package seems too small (${size} bytes)"
    fi
else
    echo "❌ VSIX package not found (expected pattern: ${VSIX_PATTERN})"
    exit 1
fi

# Run linting (if available)
echo "🔍 Running linter..."
if grep -q '"lint"' package.json; then
    npm run lint || {
        echo "⚠️  Linting failed. Consider fixing lint issues."
    }
else
    echo "⚠️  Linting not configured. Skipping..."
fi

# Final validation
echo "✅ Running final validation..."
if [ "$OS" = "Windows_NT" ] || [ "$(uname -s | grep -c MINGW)" -ne 0 ] || [ "$(uname -s | grep -c CYGWIN)" -ne 0 ]; then
    echo "⚠️  Windows detected. Checking for PowerShell support..."
    
    # Try PowerShell first (preferred for Windows)
    if command -v pwsh >/dev/null 2>&1; then
        echo "   Using PowerShell for validation..."
        pwsh -NoProfile -File scripts/validate-build.ps1 || {
            echo "❌ Final validation failed."
            exit 1
        }
    # Try powershell.exe if pwsh not available
    elif command -v powershell >/dev/null 2>&1; then
        echo "   Using Windows PowerShell for validation..."
        powershell -NoProfile -File scripts/validate-build.ps1 || {
            echo "❌ Final validation failed."
            exit 1
        }
    # Fallback to npm script if in Git Bash/MINGW with bash available
    elif [ -n "$BASH_VERSION" ]; then
        echo "   Using npm script validation (Git Bash detected)..."
        npm run validate:build 2>/dev/null || {
            echo "⚠️  Build validation skipped - shell support missing"
            echo "   Please ensure out/extension.js exists and is valid"
        }
    else
        echo "⚠️  Build validation skipped - no compatible shell found"
        echo "   Please ensure out/extension.js exists and is valid"
    fi
else
    ./scripts/validate-build.sh || {
        echo "❌ Final validation failed."
        exit 1
    }
fi

echo "✅ All pre-push validations passed!"
echo "📤 Ready to push to remote repository"