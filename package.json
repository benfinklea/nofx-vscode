{
  "name": "nofx",
  "displayName": "NofX - Multi-Agent Orchestrator",
  "description": "Orchestrate multiple Claude Code agents working in parallel on your codebase",
  "version": "0.1.0",
  "publisher": "nofx",
  "repository": {
    "type": "git",
    "url": "https://github.com/nofx/nofx-vscode"
  },
  "license": "MIT",
  "icon": "media/icon.png",
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "Other"
  ],
  "keywords": [
    "ai",
    "claude",
    "multi-agent",
    "orchestrator",
    "automation"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "nofx.start",
        "title": "Start NofX",
        "category": "NofX",
        "icon": "$(rocket)"
      },
      {
        "command": "nofx.addAgent",
        "title": "Add Agent",
        "category": "NofX",
        "icon": "$(add)"
      },
      {
        "command": "nofx.createAgentFromNaturalLanguage",
        "title": "Create Agent from Description",
        "category": "NofX",
        "icon": "$(sparkle)"
      },
      {
        "command": "nofx.dashboard",
        "title": "Open Dashboard",
        "category": "NofX",
        "icon": "$(graph)"
      },
      {
        "command": "nofx.reset",
        "title": "Reset",
        "category": "NofX",
        "icon": "$(refresh)"
      },
      {
        "command": "nofx.settings",
        "title": "Settings",
        "category": "NofX",
        "icon": "$(settings-gear)"
      },
      {
        "command": "nofx.restoreAgents",
        "title": "Restore Previous Session",
        "category": "NofX",
        "icon": "$(history)"
      },
      {
        "command": "nofx.exportSessions",
        "title": "Export Sessions",
        "category": "NofX",
        "icon": "$(save)"
      },
      {
        "command": "nofx.startConductor",
        "title": "Start Conductor",
        "category": "NofX",
        "icon": "$(play)"
      },
      {
        "command": "nofx.openMessageFlow",
        "title": "Open Message Flow Dashboard",
        "category": "NofX",
        "icon": "$(graph)"
      },
      {
        "command": "nofx.testCommand",
        "title": "Test Command",
        "category": "NofX",
        "icon": "$(beaker)"
      },
      {
        "command": "nofx.deleteAgent",
        "title": "Delete Agent",
        "category": "NofX",
        "icon": "$(trash)"
      },
      {
        "command": "nofx.editAgent",
        "title": "Edit Agent",
        "category": "NofX",
        "icon": "$(edit)"
      },
      {
        "command": "nofx.focusAgentTerminal",
        "title": "Focus Agent Terminal",
        "category": "NofX",
        "icon": "$(terminal)"
      },
      {
        "command": "nofx.restoreAgentFromSession",
        "title": "Restore Agent From Session",
        "category": "NofX",
        "icon": "$(sync)"
      },
      {
        "command": "nofx.clearAgents",
        "title": "Clear All Agents",
        "category": "NofX",
        "icon": "$(clear-all)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "nofx.addAgent",
          "when": "view == nofx.agents",
          "group": "navigation@1"
        },
        {
          "command": "nofx.createAgentFromNaturalLanguage",
          "when": "view == nofx.agents",
          "group": "navigation@2"
        }
      ],
      "view/item/context": [
        {
          "command": "nofx.deleteAgent",
          "when": "view == nofx.agents && viewItem == agent",
          "group": "inline"
        },
        {
          "command": "nofx.editAgent",
          "when": "view == nofx.agents && viewItem == agent",
          "group": "inline"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "nofx-conductor",
          "title": "NofX Conductor",
          "icon": "media/robot-icon.svg"
        }
      ]
    },
    "views": {
      "nofx-conductor": [
        {
          "id": "nofx.dev",
          "name": "NofX.dev",
          "icon": "$(rocket)",
          "contextualTitle": "NofX.dev"
        },
        {
          "id": "nofx.agents",
          "name": "Agents & Tasks",
          "icon": "$(person)",
          "contextualTitle": "Active Agents"
        },
        {
          "id": "nofx.activity",
          "name": "Activity",
          "icon": "$(pulse)",
          "contextualTitle": "Agent Activity"
        },
        {
          "id": "nofx.tasks",
          "name": "Tasks",
          "icon": "$(tasklist)",
          "contextualTitle": "Task Management"
        }
      ],
      "panel": [
        {
          "id": "nofx.terminalView",
          "name": "NofX",
          "icon": "$(terminal)",
          "when": "nofx.hasAgents"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "nofx.dev",
        "contents": "ðŸŽ¸ **NofX Conductor**\n\n**Debug:**\n[$(beaker) Test Command](command:nofx.testCommand)\n\n**Quick Actions:**\n[$(play) Start New Session](command:nofx.startConductor)\n[$(history) Restore Previous Session](command:nofx.restoreAgents)\n[$(save) Save Current Session](command:nofx.exportSessions)\n\n**Agent Management:**\n[$(add) Add Agent(s)](command:nofx.addAgent)\n[$(sparkle) Create Agent from Description](command:nofx.createAgentFromNaturalLanguage)\n[$(graph) Messages Dashboard](command:nofx.openMessageFlow)"
      },
      {
        "view": "nofx.agents",
        "contents": "No active agents yet.\n\n[$(add) Add Agent](command:nofx.addAgent)\n[$(play) Start Conductor](command:nofx.startConductor)",
        "when": "!nofx.hasAgents"
      },
      {
        "view": "nofx.activity",
        "contents": "**Agent Activity**\n\n[$(add) Add Agent](command:nofx.addAgent)\n[$(play) Start Team](command:nofx.startConductor)\n[$(history) Restore Agents](command:nofx.restoreAgents)"
      },
      {
        "view": "nofx.tasks",
        "contents": "**Task Management**\n\n[$(add) Create Task](command:nofx.createTask)\n[$(checklist) Create Task Batch](command:nofx.createTaskBatch)\n[$(list-tree) View Dependencies](command:nofx.viewTaskDependencies)"
      }
    ],
    "configuration": {
      "title": "NofX",
      "properties": {
        "nofx.aiProvider": {
          "type": "string",
          "default": "claude",
          "enum": [
            "claude",
            "aider",
            "custom"
          ],
          "enumDescriptions": [
            "Claude Code CLI (Anthropic)",
            "Aider - AI pair programming",
            "Custom AI command"
          ],
          "description": "AI provider for agents"
        },
        "nofx.maxAgents": {
          "type": "number",
          "default": 3,
          "minimum": 1,
          "maximum": 10,
          "description": "Maximum concurrent agents"
        },
        "nofx.aiPath": {
          "type": "string",
          "default": "",
          "description": "Custom AI CLI path (when provider=custom)"
        }
      }
    },
    "keybindings": [
      {
        "command": "nofx.showOrchestrator",
        "key": "ctrl+shift+o",
        "mac": "cmd+shift+o",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./tsconfig.build.json || true",
    "postcompile": "cp -r src/agents/templates out/agents/ && ./scripts/validate-build.sh --quiet || true",
    "watch": "tsc -watch -p ./tsconfig.build.json",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "format": "prettier --write \"src/**/*.{ts,js,json}\"",
    "format:check": "prettier --check \"src/**/*.{ts,js,json}\"",
    "test": "jest",
    "test:unit": "MOCK_FS=true jest --testPathPattern=unit",
    "test:integration": "jest --testPathPattern=integration",
    "test:functional": "MOCK_FS=false tsc -p ./tsconfig.test.json && node ./out/test/functional/runFunctionalTests.js",
    "test:smoke": "jest --testPathPattern=smoke",
    "test:contract": "jest --testPathPattern=contract",
    "test:e2e": "MOCK_FS=false tsc -p ./tsconfig.test.json && node ./out/test/runTests.js",
    "test:persistence": "MOCK_FS=false jest --testPathPattern=MetricsAndPersistence",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:functional",
    "test:ci": "npm run compile && npm run lint && npm run test:all",
    "test:manual": "echo 'Opening manual test checklist...' && code test-extension.md",
    "test:prompts": "node scripts/test-claude-prompts.js",
    "test:prompts:watch": "node scripts/test-claude-prompts.js --watch",
    "test:prompts:regression": "node scripts/test-claude-prompts.js --suite=regression",
    "test:critical": "node scripts/run-critical-tests.js",
    "test:entrepreneur": "npm run test:critical",
    "test:pre-release": "npm run test:critical && npm run test:coverage",
    "test:watch": "jest --watch",
    "pretest:coverage": "npm run clean:src",
    "test:coverage": "jest --coverage --coverageDirectory=coverage --coverageReporters=text,lcov,html",
    "clean:src": "rimraf src/**/*.js",
    "coverage:baseline": "node ./scripts/coverage-baseline.mjs",
    "coverage:update-thresholds": "node ./scripts/update-coverage-thresholds.mjs",
    "test:build": "npm run compile && jest --testPathPattern=build/BuildValidation",
    "test:commands": "jest --testPathPattern=commands/CommandRegistration",
    "test:services": "jest --testPathPattern=services/ContainerValidation",
    "validate:build": "./scripts/validate-build.sh",
    "validate:commands": "node ./scripts/validate-commands.js",
    "print:commands": "node ./scripts/print-commands.js",
    "print:scripts": "node ./scripts/print-scripts.js",
    "validate:services": "npm run test:services",
    "validate:all": "npm run validate:build && npm run validate:commands && npm run validate:services",
    "dev:setup": "./scripts/install-hooks.sh",
    "dev:validate": "npm run compile && npm run validate:build --quiet",
    "dev:clean": "rimraf out coverage nofx-*.vsix src/**/*.js",
    "dev:reset": "rimraf out coverage node_modules nofx-*.vsix && npm install && npm run compile",
    "build": "npm run compile && npx vsce package",
    "build:clean": "rimraf out nofx-*.vsix && npm run build",
    "build:validate": "npm run compile && npm run validate:all && npm run build",
    "build:ci": "npm run test:ci && npm run build:validate",
    "hooks:install": "./scripts/install-hooks.sh",
    "hooks:uninstall": "./scripts/install-hooks.sh uninstall",
    "hooks:test": "./scripts/install-hooks.sh test",
    "hooks:verify": "./scripts/verify-hooks.sh",
    "hooks:verify:fix": "./scripts/verify-hooks.sh --fix",
    "qa:full": "npm run compile && npm run lint && npm run test:all && npm run validate:all",
    "qa:quick": "npm run compile && npm run validate:build",
    "qa:pre-commit": "npm run compile && npm run validate:build --quiet",
    "prepackage": "npm run compile",
    "package": "npx vsce package",
    "prepare": "husky",
    "agents:phase": "./.agents/scripts/execute-phase.sh",
    "agents:performance": "./.agents/performance/execute.sh",
    "agents:security": "./.agents/security/execute.sh", 
    "agents:testing": "./.agents/testing/execute.sh",
    "agents:documentation": "./.agents/documentation/execute.sh",
    "agents:report": "find .agents/shared/reports -name '*.json' -o -name '*.md' | head -10",
    "implement:phase13": "./.agents/implementation/phase13-implement.sh",
    "implement:servicelocator": "./.agents/implementation/phase13-servicelocator.sh",
    "implement:extension": "./.agents/implementation/phase13-extension-update.sh",
    "implement:references": "./.agents/implementation/phase13-update-references.sh",
    "implement:cleanup": "./.agents/implementation/phase13-cleanup.sh",
    "implement:phase14": "./.agents/implementation/phase14-implement.sh",
    "implement:phase15": "./.agents/implementation/phase15-implement.sh",
    "implement:phase16": "./.agents/implementation/phase16-implement.sh",
    "implement:phase17": "./.agents/implementation/phase17-implement.sh"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/jest": "^29.5.8",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.85.0",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "get-port": "^7.1.0",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jest-junit": "^16.0.0",
    "mocha": "^11.7.2",
    "prettier": "^3.6.2",
    "rimraf": "^6.0.1",
    "sinon": "^17.0.1",
    "supertest": "^6.3.3",
    "tmp": "^0.2.3",
    "ts-jest": "^29.1.1",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@vscode/extension-telemetry": "^1.0.0",
    "uuid": "^9.0.1",
    "ws": "^8.18.3",
    "zod": "^3.22.4"
  }
}