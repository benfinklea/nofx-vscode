{
  "name": "nofx",
  "displayName": "NofX - Multi-Agent Orchestrator",
  "description": "Orchestrate multiple Claude Code agents working in parallel on your codebase",
  "version": "0.1.0",
  "publisher": "nofx",
  "repository": {
    "type": "git",
    "url": "https://github.com/nofx/nofx-vscode"
  },
  "license": "MIT",
  "icon": "media/icon.png",
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "Other"
  ],
  "keywords": [
    "ai",
    "claude",
    "multi-agent",
    "orchestrator",
    "automation"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onView:nofx.dev",
    "onView:nofx.agents",
    "onCommand:nofx.startConductor",
    "onCommand:nofx.addAgent"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "nofx.startConductor",
        "title": "NofX: Start Conductor",
        "icon": "$(play)"
      },
      {
        "command": "nofx.quickStartChat",
        "title": "NofX: Quick Start with Conductor Chat",
        "icon": "$(rocket)"
      },
      {
        "command": "nofx.resetNofX",
        "title": "NofX: Reset Everything",
        "icon": "$(refresh)"
      },
      {
        "command": "nofx.addAgent",
        "title": "NofX: Add Agent",
        "icon": "$(add)"
      },
      {
        "command": "nofx.createTask",
        "title": "NofX: Create Task",
        "icon": "$(tasklist)"
      },
      {
        "command": "nofx.showOrchestrator",
        "title": "NofX: Show Orchestrator",
        "icon": "$(dashboard)"
      },
      {
        "command": "nofx.completeTask",
        "title": "NofX: Mark Task Complete",
        "icon": "$(check)"
      },
      {
        "command": "nofx.editAgent",
        "title": "NofX: Edit Agent",
        "icon": "$(edit)"
      },
      {
        "command": "nofx.deleteAgent",
        "title": "NofX: Delete Agent",
        "icon": "$(trash)"
      },
      {
        "command": "nofx.testClaude",
        "title": "NofX: Test Claude Command",
        "icon": "$(beaker)"
      },
      {
        "command": "nofx.openConductorChat",
        "title": "NofX: Open Conductor Chat",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "nofx.openSimpleConductor",
        "title": "NofX: Open Simple Conductor (No Permissions)",
        "icon": "$(comment)"
      },
      {
        "command": "nofx.openConductorTerminal",
        "title": "NofX: Open Conductor Terminal",
        "icon": "$(terminal)"
      },
      {
        "command": "nofx.openMessageFlow",
        "title": "NofX: Open Message Flow Dashboard",
        "icon": "$(graph)"
      },
      {
        "command": "nofx.exportSessions",
        "title": "NofX: Export Agent Sessions",
        "icon": "$(export)"
      },
      {
        "command": "nofx.archiveSessions",
        "title": "NofX: Archive Old Sessions",
        "icon": "$(archive)"
      },
      {
        "command": "nofx.clearPersistence",
        "title": "NofX: Clear All Persistence Data",
        "icon": "$(trash)"
      },
      {
        "command": "nofx.restoreAgents",
        "title": "NofX: Restore Saved Agents",
        "icon": "$(history)"
      },
      {
        "command": "nofx.createAgentTemplate",
        "title": "NofX: Create Agent Template",
        "icon": "$(file-add)"
      },
      {
        "command": "nofx.editAgentTemplate",
        "title": "NofX: Edit Agent Template",
        "icon": "$(edit)"
      },
      {
        "command": "nofx.importAgentTemplate",
        "title": "NofX: Import Agent Template",
        "icon": "$(cloud-download)"
      },
      {
        "command": "nofx.browseAgentTemplates",
        "title": "NofX: Browse Agent Templates",
        "icon": "$(library)"
      },
      {
        "command": "nofx.toggleWorktrees",
        "title": "NofX: Toggle Git Worktrees",
        "icon": "$(git-branch)"
      },
      {
        "command": "nofx.mergeAgentWork",
        "title": "NofX: Merge Agent Work",
        "icon": "$(git-merge)"
      },
      {
        "command": "nofx.showMetricsDashboard",
        "title": "NofX: Show Metrics Dashboard",
        "icon": "$(graph)"
      },
      {
        "command": "nofx.exportMetrics",
        "title": "NofX: Export Metrics Data",
        "icon": "$(export)"
      },
      {
        "command": "nofx.resetMetrics",
        "title": "NofX: Reset Metrics Data",
        "icon": "$(refresh)"
      },
      {
        "command": "nofx.toggleMetrics",
        "title": "NofX: Toggle Metrics Collection",
        "icon": "$(pulse)"
      },
      {
        "command": "nofx.addTaskDependency",
        "title": "NofX: Add Task Dependency",
        "icon": "$(link)"
      },
      {
        "command": "nofx.removeTaskDependency",
        "title": "NofX: Remove Task Dependency",
        "icon": "$(unlink)"
      },
      {
        "command": "nofx.resolveTaskConflict",
        "title": "NofX: Resolve Task Conflict",
        "icon": "$(check-all)"
      },
      {
        "command": "nofx.viewTaskDependencies",
        "title": "NofX: View Task Dependencies",
        "icon": "$(graph)"
      },
      {
        "command": "nofx.retryBlockedTask",
        "title": "NofX: Retry Blocked Task",
        "icon": "$(refresh)"
      },
      {
        "command": "nofx.createTaskBatch",
        "title": "NofX: Create Task Batch",
        "icon": "$(list-ordered)"
      },
      {
        "command": "nofx.resolveAllConflicts",
        "title": "NofX: Resolve All Conflicts",
        "icon": "$(check-all)"
      },
      {
        "command": "nofx.openConductorPanel",
        "title": "NofX: Open Conductor Panel",
        "icon": "$(panel)"
      },
      {
        "command": "nofx.debug.verifyCommands",
        "title": "NofX: Debug - Verify Registered Commands",
        "icon": "$(debug)"
      },
      {
        "command": "nofx.focusAgentTerminal",
        "title": "NofX: Focus Agent Terminal",
        "icon": "$(terminal)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "nofx.addAgent",
          "when": "view == nofx.agents",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "nofx.deleteAgent",
          "when": "view == nofx.agents && viewItem == agent",
          "group": "inline"
        },
        {
          "command": "nofx.editAgent",
          "when": "view == nofx.agents && viewItem == agent",
          "group": "inline"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "nofx-conductor",
          "title": "NofX Conductor",
          "icon": "media/robot-icon.svg"
        }
      ]
    },
    "views": {
      "nofx-conductor": [
        {
          "id": "nofx.dev",
          "name": "NofX.dev",
          "icon": "$(rocket)",
          "contextualTitle": "NofX.dev"
        },
        {
          "id": "nofx.agents",
          "name": "Agents & Tasks",
          "icon": "$(person)",
          "contextualTitle": "Active Agents"
        },
        {
          "id": "nofx.activity",
          "name": "Activity",
          "icon": "$(pulse)",
          "contextualTitle": "Agent Activity"
        },
        {
          "id": "nofx.tasks",
          "name": "Tasks",
          "icon": "$(tasklist)",
          "contextualTitle": "Task Management"
        }
      ],
      "panel": [
        {
          "id": "nofx.terminalView",
          "name": "NofX",
          "icon": "$(terminal)",
          "when": "nofx.hasAgents"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "nofx.dev",
        "contents": "ðŸŽ¸ **NofX Conductor**\n\n**Quick Actions:**\n[$(play) Start New Session](command:nofx.startConductor)\n[$(history) Restore Previous Session](command:nofx.restoreAgents)\n[$(save) Save Current Session](command:nofx.exportSessions)\n\n**Agent Management:**\n[$(add) Add Agent(s)](command:nofx.addAgent)\n[$(graph) Messages Dashboard](command:nofx.openMessageFlow)"
      },
      {
        "view": "nofx.agents",
        "contents": "No active agents yet.\n\n[$(add) Add Agent](command:nofx.addAgent)\n[$(play) Start Conductor](command:nofx.startConductor)",
        "when": "!nofx.hasAgents"
      }
    ],
    "configuration": {
      "title": "NofX",
      "properties": {
        "nofx.maxAgents": {
          "type": "number",
          "default": 3,
          "description": "Maximum number of concurrent agents"
        },
        "nofx.agentTypes": {
          "type": "array",
          "default": [
            "Frontend Specialist",
            "Backend Specialist",
            "Testing Specialist",
            "Documentation Writer",
            "General Purpose"
          ],
          "description": "Available agent specializations"
        },
        "nofx.claudePath": {
          "type": "string",
          "default": "claude",
          "description": "Path to Claude Code CLI"
        },
        "nofx.autoAssignTasks": {
          "type": "boolean",
          "default": true,
          "description": "Automatically assign tasks to available agents"
        },
        "nofx.autoStart": {
          "type": "boolean",
          "default": false,
          "description": "Automatically start NofX when VS Code opens"
        },
        "nofx.useWorktrees": {
          "type": "boolean",
          "default": true,
          "description": "Use Git worktrees for parallel agent sessions (Anthropic recommendation)"
        },
        "nofx.claudeCommandStyle": {
          "type": "string",
          "default": "simple",
          "enum": [
            "simple",
            "interactive",
            "heredoc",
            "file"
          ],
          "description": "How to pass prompts to Claude CLI (simple: echo | claude, interactive: claude then prompt, heredoc: claude << EOF, file: via temp file)"
        },
        "nofx.enableMetrics": {
          "type": "boolean",
          "default": false,
          "description": "Enable performance metrics collection"
        },
        "nofx.metricsOutputLevel": {
          "type": "string",
          "default": "basic",
          "enum": [
            "none",
            "basic",
            "detailed"
          ],
          "description": "Level of detail for metrics output"
        },
        "nofx.testMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable test mode for integration testing"
        },
        "nofx.metricsRetentionHours": {
          "type": "number",
          "default": 24,
          "minimum": 1,
          "maximum": 168,
          "description": "Hours to retain metrics in memory"
        },
        "nofx.logLevel": {
          "type": "string",
          "default": "info",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "description": "Logging level for NofX extension output"
        }
      }
    },
    "keybindings": [
      {
        "command": "nofx.showOrchestrator",
        "key": "ctrl+shift+o",
        "mac": "cmd+shift+o",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./tsconfig.build.json",
    "watch": "tsc -watch -p ./tsconfig.build.json",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "jest",
    "test:unit": "jest --testPathPattern=unit",
    "test:integration": "jest --testPathPattern=integration",
    "test:functional": "tsc -p ./tsconfig.test.json && node ./out/test/functional/runFunctionalTests.js",
    "test:smoke": "jest --testPathPattern=CommandSmokeTests",
    "test:e2e": "tsc -p ./tsconfig.test.json && node ./out/test/runTests.js",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:functional",
    "test:ci": "npm run compile && npm run lint && npm run test:all",
    "test:manual": "echo 'Opening manual test checklist...' && code test-extension.md",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage --coverageDirectory=coverage --coverageReporters=text,lcov,html",
    "test:build": "npm run compile && jest --testPathPattern=build/BuildValidation",
    "test:commands": "jest --testPathPattern=commands/CommandRegistration",
    "test:services": "jest --testPathPattern=services/ContainerValidation",
    "validate:build": "./scripts/validate-build.sh",
    "validate:commands": "npm run test:commands",
    "validate:services": "npm run test:services",
    "validate:all": "npm run validate:build && npm run validate:commands && npm run validate:services",
    "dev:setup": "./scripts/install-hooks.sh",
    "dev:validate": "npm run compile && npm run validate:build --quiet",
    "dev:clean": "rimraf out coverage nofx-*.vsix",
    "dev:reset": "rimraf out coverage node_modules nofx-*.vsix && npm install && npm run compile",
    "build": "npm run compile && npx vsce package",
    "build:clean": "rimraf out nofx-*.vsix && npm run build",
    "build:validate": "npm run compile && npm run validate:all && npm run build",
    "build:ci": "npm run test:ci && npm run build:validate",
    "hooks:install": "./scripts/install-hooks.sh",
    "hooks:uninstall": "./scripts/install-hooks.sh uninstall",
    "hooks:test": "./scripts/install-hooks.sh test",
    "hooks:verify": "./scripts/verify-hooks.sh",
    "hooks:verify:fix": "./scripts/verify-hooks.sh --fix",
    "qa:full": "npm run compile && npm run lint && npm run test:all && npm run validate:all",
    "qa:quick": "npm run compile && npm run validate:build",
    "qa:pre-commit": "npm run compile && npm run validate:build --quiet",
    "prepackage": "npm run compile",
    "package": "npx vsce package",
    "prepare": "husky"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/jest": "^29.5.8",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^6.15.0",
    "@typescript-eslint/parser": "^6.15.0",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "eslint": "^8.56.0",
    "get-port": "^7.1.0",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jest-junit": "^16.0.0",
    "mocha": "^11.7.2",
    "rimraf": "^6.0.1",
    "sinon": "^17.0.1",
    "supertest": "^6.3.3",
    "tmp": "^0.2.3",
    "ts-jest": "^29.1.1",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@types/ws": "^8.18.1",
    "uuid": "^9.0.1",
    "ws": "^8.18.3",
    "zod": "^3.22.4"
  }
}
